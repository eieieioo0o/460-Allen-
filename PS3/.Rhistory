b = as.numeric(df_c$destination==level);
c = a-b;
df_c[paste("dummy", level, sep = "_")] <- c
}
head(df_c)
result_c = lm(df_c$ratio ~ 0 + . , data = df_c);
summary(result_c)
rm(list=ls());
gc();
gc();
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
# names
a = df$origin;
b = df$destination;
c = rbind(a,b);
c = c[1,];
total_name = unique(c);
# dummy for (c)
df_c = df;
for(level in unique(total_name)){
a = as.numeric(df_c$origin     ==level);
b = as.numeric(df_c$destination==level);
c = a-b;
df_c[paste("dummy", level, sep = "_")] <- c
}
# dummy for (ds)
df_d = df;
for(level in unique(total_name)){
a = df_c$origin     ==level;
b = df_c$destination==level;
c = a+b;
df_c[paste("dummy", level, sep = "_")] <- c
}
df_import_export = data.frame(export = tapply(df$trade,df$destination,mean), import = tapply(df$trade,df$origin,mean))
#export =  tapply(df$trade,df$destination,mean)
#export = data.frame(names(export),export)
#names(export)[1]= c("destination")
#merge(df$destination,export,by = c("destination"))
save.image("trade_data_set_cleaned")
df_b = df_b[-c(1,2,4,5,6,7,9,10)]
df_c = df_c[-c(1,2,4,5,6,7,8,9)]
df_d = df_c[-c(1,2,4,5,6,7,9,10)];
df_b = df_b[-c(1,2,4,5,6,7,9,10)]
df_c = df_c[-c(1,2,4,5,6,7,8,9)]
df_d = df_d[-c(1,2,4,5,6,7,9,10)];
qplot(df$distance,df$trade-df$gdp_origin -df$gdp_destination) + xlab("log of distance") + ylab("log (Xij) - log(Yi) - log(Yj)") + ggtitle("Correlation") + geom_smooth();
ggsave("dist_tradeflow.eps",width = 10, height = 10)
# (a-i)
result_a_i = lm(df$trade-df$gdp_origin -df$gdp_destination ~ 0 +  df$distance);
summary(result_a_i)
## with a twist ----
# (a-ii)
result_a_ii = lm(df$trade~ 0 + df$distance + df$gdp_origin + df$gdp_destination);
summary(result_a_ii)
plot.lm(result_a_ii)
result_b = lm(df_b$trade ~ 0 + . ,data = df_b);
head(df_b)
names(df_b)
df_b = df;
for(level in unique(df_b$origin)){
df_b[paste("origin_dummy", level, sep = "_")] <- ifelse(df_b$origin == level, 1, 0)
}
for(level in unique(df_b$destination)){
df_b[paste("destination_dummy", level, sep = "_")] <- ifelse(df_b$destination == level, 1, 0)
}
names(df_b)
df_b = df_b[-c(1,2,4,5,6,7,9,10)]; # 3 = distance , 8 = trade flow
head(df_b)
names(df_b)
result_b = lm(df_b$trade ~ 0 + . ,data = df_b);
summary(result_b)
result_c = lm(df_c$ratio ~ 0 + . , data = df_c);
names(df_c)
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
df_b = df_b[-c(1,2,4,5,6,7,9,10)]; # 3 = distance , 8 = trade flow
df_c = df_c[-c(1,2,4,5,6,7,8,9)];
df_d = df_d[-c(1,2,4,5,6,7,9,10)];
result_b = lm(df_b$trade ~ 0 + . ,data = df_b);
summary(result_b)
result_c = lm(df_c$ratio ~ 0 + . , data = df_c);
summary(result_c)
result_d = lm(df_d$trade ~ 0 +. ,data = df_d);
summary(result_d)
head(df)
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
df_b = df_b[-c(1,2,4,5,6,7,9,10)]; # 3 = distance , 8 = trade flow
df_c = df_c[-c(1,2,4,5,6,7,8,9)];
df_d = df_d[-c(1,2,4,5,6,7,9,10)];
result_d = lm(df_d$trade ~ 0 +. ,data = df_d);
names(result_d)
names(df_d)
summary(result_d)
balance = lm(df_import_export$import ~ 0 + df_import_export$export)
df_import_export = data.frame(export = tapply(df$trade,df$destination,mean), import = tapply(df$trade,df$origin,mean))
dff = df;
df = read.dta("tradedata.dta")
dff = df;
## load the data ------------------------------------------
df = read.dta("tradedata.dta")
dff = df;
dff = subset(dff,trade>0);
# take a log
dff[-c(1,2)] = log(dff[-c(1,2)]);
df_import_export = data.frame(export = tapply(dff$trade,dff$destination,mean), import = tapply(dff$trade,dff$origin,mean))
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
balance = lm(df_import_export$import ~ 0 + df_import_export$export)
rhs = 1;
hm  = 1;
linearHypothesis(balance,hm,rhs)
summary(balance)
summary(df_import_export)
linearHypothesis(balance,hm,rhs)
summary(df_import_export)
balance = lm(df_import_export$import ~ 0 + df_import_export$export)
summary(balance)
qplot(df$distance,df$trade-df$gdp_origin -df$gdp_destination)
+ xlab("log of distance") + ylab("log (Xij) - log(Yi) - log(Yj)") + ggtitle("Correlation") + geom_smooth();
qplot(df$distance,df$trade-df$gdp_origin -df$gdp_destination) + xlab("log of distance") + ylab("log (Xij) - log(Yi) - log(Yj)") + ggtitle("Correlation") + geom_smooth();
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
qplot(df$distance,df$trade-df$gdp_origin -df$gdp_destination) + xlab("log of distance") + ylab("log (Xij) - log(Yi) - log(Yj)") + ggtitle("Correlation") + geom_smooth();
ggsave("dist_tradeflow.eps",width = 10, height = 10)
df_b = df_b[-c(1,2,4,5,6,7,9,10)]; # 3 = distance , 8 = trade flow
df_c = df_c[-c(1,2,4,5,6,7,8,9)];
df_d = df_d[-c(1,2,4,5,6,7,9,10)];
result_d = lm(df_d$trade ~ 0 +. ,data = df_d);
summary(result_d)
balance = lm(df_import_export$import ~ 0 + df_import_export$export)
rhs = 1;
hm  = 1;
linearHypothesis(balance,hm,rhs)
summary(balance)
summary(df_import_export)
summary(result_c)
result_c = lm(df_c$ratio ~ 0 + . , data = df_c);
summary(result_c)
result_a_ii = lm(df$trade~ 0 + df$distance + df$gdp_origin + df$gdp_destination);
result_b = lm(df_b$trade ~ 0 + . ,data = df_b);
summary(result_b)
df_2 = df_d;
for(level in unique(total_name)){
df_d[paste("additional_destination_dummy", level, sep = "_")] <- ifelse(df_2$destination == level, 1, 0)
}
save.image("trade_data_set_cleaned")
df_2 = df_2[-c(1,2,4,5,6,7,9,10)];
names(df_2)
names(df_d)
df_d = df;
for(level in unique(total_name)){
a = as.numeric(df_c$origin     ==level);
b = as.numeric(df_c$destination==level);
c = a+b;
df_d[paste("dummy", level, sep = "_")] <- c
}
# dummy for 2 (c)
df_2 = df_d;
for(level in unique(total_name)){
df_2[paste("additional_destination_dummy", level, sep = "_")] <- ifelse(df_2$destination == level, 1, 0)
}
save.image("trade_data_set_cleaned")
df_2 = df_2[-c(1,2,4,5,6,7,9,10)];
names(df_2)
result_2 = lm(df_2$trade ~ 0 + . , data  = df_2)
summary(result_2)
result_2 = lm(df_2$trade ~ 0 + . , data  = df_2)
head(df_2)
df_d = df;
for(level in unique(total_name)){
a = as.numeric(df_c$origin     ==level);
b = as.numeric(df_c$destination==level);
c = a+b;
df_d[paste("dummy", level, sep = "_")] <- c
}
df_d
df
df_c = df;
for(level in unique(total_name)){
a = as.numeric(df_c$origin     ==level);
b = as.numeric(df_c$destination==level);
c = a-b;
df_c[paste("dummy", level, sep = "_")] <- c
}
# dummy for (d)
df_d = df;
for(level in unique(total_name)){
a = as.numeric(df_d$origin     ==level);
b = as.numeric(df_d$destination==level);
c = a+b;
df_d[paste("dummy", level, sep = "_")] <- c
}
head(df)
head(df_d)
df_2 = df_d;
for(level in unique(total_name)){
df_2[paste("additional_destination_dummy", level, sep = "_")] <- ifelse(df_2$destination == level, 1, 0)
}
df_2 = df_2[-c(1,2,4,5,6,7,9,10)];
result_2 = lm(df_2$trade ~ 0 + . , data  = df_2)
summary(result_2)
load("~/Dropbox/Matlab/460(Allen)/PS3/.RData")
qplot(df$distance,df$trade-df$gdp_origin -df$gdp_destination) + xlab("log of distance") + ylab("log (Xij) - log(Yi) - log(Yj)") + ggtitle("Correlation") + geom_smooth();
ggsave("dist_tradeflow_adjusted.eps",width = 10, height = 10)
df
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
qplot(df$distance,df$trade) + xlab("log of distance") + ylab("log (Xij) : tradeflows") + ggtitle("Correlation") + geom_smooth();
ggsave("dist_tradeflow.eps",width = 10, height = 10)
qplot(df$distance,df$trade-df$gdp_origin -df$gdp_destination) + xlab("log of distance") + ylab("log (Xij) - log(Yi) - log(Yj)") + ggtitle("Correlation") + geom_smooth();
ggsave("dist_tradeflow_adjusted.eps",width = 10, height = 10)
result_a_i = lm(df$trade-df$gdp_origin -df$gdp_destination ~ 0 +  df$distance);
summary(result_a_i)
coefficients(result_a)
coefficients(result_a_i)
result_a_ii = lm(df$trade~ 0 + df$distance + df$gdp_origin + df$gdp_destination);
summary(result_a_ii)
result_b = lm(df_b$trade ~ 0 + . ,data = df_b);
summary(result_b)
df_b
names(df_b)
head(df_b)
df_b = df_b[-c(1,2,4,5,6,7,9,10)]; # 3 = distance , 8 = trade flow
df_c = df_c[-c(1,2,4,5,6,7,8,9)];
df_d = df_d[-c(1,2,4,5,6,7,9,10)];
df_2 = df_2[-c(1,2,4,5,6,7,9,10)];
result_b = lm(df_b$trade ~ 0 + . ,data = df_b);
summary(result_b)
help(lm)
coef(result_b)
a = coef(result_b)
class(a)
a[1]
a[2]
a[2:180]
class(a)
coefficient = coef(result_b);
coefficients = coefficients[-1];
coefficient = coef(result_b);
coefficient = coef(result_b);
coefficient = coefficient[-1];
coefficient
coefficient[170]
coefficient[180]
coefficient[190]
coefficient[185]
coefficient[187]
coefficient[182]
coefficient[18]
coefficient[181]
coefficient[182]
coefficient[181]
origin_effect = coefficient[1:181];
destination_effect = coefficient[-c(1:181)]
destination_effect
qplot(origin_effect,destination_effect)
coefficient = coef(result_b);
coefficient = coefficient[-1];
origin_effect = coefficient[1:180];
destination_effect = coefficient[-c(1:181)]
destination_effect = destination_effect[1:180]
qplot(origin_effect,destination_effect)
origin_effect = coefficient[1:181];
destination_effect = coefficient[-c(1:181)]
ncol(destination_effect)
destination_effect
class(destination_effect)
result_b = lm(df_b$trade ~ 0 + . ,data = df_b);
coefficient = coef(result_b);
coefficient = coefficient[-1];
origin_effect = coefficient[1:180];
destination_effect = coefficient[-c(1:181)]
destination_effect = destination_effect[1:180]
qplot(origin_effect,destination_effect)
qplot(origin_effect,destination_effect) + xlab("Origin effect") + ylab("Destination effect") + ggtitle("Fixed effects")
qplot(origin_effect,destination_effect) + xlab("Origin effect") + ylab("Destination effect") + ggtitle("Fixed effects") + geom_smooth()
qplot(origin_effect,destination_effect) + xlab("Origin effect") + ylab("Destination effect") + ggtitle("Fixed effects") + geom_smooth()
ggsave("Fixed_effects.eps",width = 10, height = 10)
fixed_effects = data.frame(origin_fixed_effects = origin_effect, destination_fixed_effects = destination_effect )
names(fixed_effects)
mydf <- data.frame(x=rnorm(10, mean=-10),y = rnorm(10, mean=10), sex=sample(c("M","F"), 100, rep=T))#, group=gl(5, 20, labels=LETTERS[1:5]))
mydf = ddply(mydf, c("sex"), transform, x.mean=mean(y))
mydf
mydf <- data.frame(x=rnorm(10, mean=-10),y = rnorm(10, mean=10), sex=sample(c("M","F"), 10, rep=T))#, group=gl(5, 20, labels=LETTERS[1:5]))
mydf = ddply(mydf, c("sex"), transform, x.mean=mean(y))
mydf
sweep(mydf, 1, apply(mydf,1,mean))
mydf <- data.frame(x=rnorm(10, mean=-10),y = rnorm(10, mean=10), sex=sample(c("M","F"), 10, rep=T))#, group=gl(5, 20, labels=LETTERS[1:5]))
sweep(mydf, 1, apply(mydf,1,mean))
mydf
sweep(mydf, 1, apply(mydf,2,mean))
sweep(mydf, 2, apply(mydf,2,mean))
mydf <- data.frame(x=rnorm(10, mean=-10),y = rnorm(10, mean=10), sex=sample(c("M","F"), 10, rep=T))#, group=gl(5, 20, labels=LETTERS[1:5]))
mydf
mydf <- data.frame(x=rnorm(10, mean=-10),y = rnorm(10, mean=10))
sweep(mydf, 1, apply(mydf,2,mean))
sweep(mydf, 2, apply(mydf,2,mean))
mydf <- data.frame(x=-4:4,y = -4:4)
mydf
sweep(mydf, 2, apply(mydf,2,mean))
sweep(mydf, 2, apply(mydf,1,mean))
sweep(mydf, 1, apply(mydf,2,mean))
help(sweep)
mydf <- data.frame(x=-4:4,y = -4:4)
apply(mydf,2,mean)
sweep(mydf, 2, 1)
sweep(mydf, 2, c(1,2) )
sweep(mydf, 2, c(1,2,3) )
sweep(mydf, 2, c(1,2) )
sweep(mydf, 2, c(1,1) )
test = sweep(fixed_effects, 2, apply(fixed_effects,2,mean))
class(test)
fixed_effects = sweep(fixed_effects, 2, apply(fixed_effects,2,mean))
names(fixed_effects)
qplot(fixed_effects$origin_effect,fixed_effects$destination_effect) + xlab("Origin effect") + ylab("Destination effect") + ggtitle("Fixed effects") + geom_smooth()
coefficient = coef(result_b);
coefficient = coefficient[-1];
origin_effect = coefficient[1:180];
destination_effect = coefficient[-c(1:181)]
destination_effect = destination_effect[1:180]
fixed_effects = data.frame(origin_fixed_effects = origin_effect, destination_fixed_effects = destination_effect )
fixed_effects = sweep(fixed_effects, 2, apply(fixed_effects,2,mean))
qplot(fixed_effects$origin_effect,fixed_effects$destination_effect) + xlab("Origin effect") + ylab("Destination effect") + ggtitle("Fixed effects") + geom_smooth()
fixed_effects$origin_effect
fixed_effects
coefficient = coef(result_b);
coefficient = coefficient[-1];
coefficient
origin_effect = coefficient[1:180];
destination_effect = coefficient[-c(1:181)]
destination_effect
destination_effect = destination_effect[1:180]
fixed_effects = data.frame(origin_fixed_effects = origin_effect, destination_fixed_effects = destination_effect )
fixed_effects
apply(fixed_effects,2,mean)
fixed_effects = sweep(fixed_effects, 2, apply(fixed_effects,2,mean,na.rm = TRUE))
fixed_effects = data.frame(origin_fixed_effects = origin_effect, destination_fixed_effects = destination_effect )
fixed_effects = sweep(fixed_effects, 2, apply(fixed_effects,2,mean,na.rm = TRUE))
apply(fixed_effects,2,mean,na.rm = TRUE)
fixed_effects
fixed_effects[1]
fixed_effects[1,1]
fixed_effects = na.omit(fixed_effects)
fixed_effects
fixed_effects = sweep(fixed_effects, 2, apply(fixed_effects,2,mean));
apply(fixed_effects,2,mean)
a = fixed_effects[,1]
a
mean(a)
coefficient = coef(result_b);
coefficient = coefficient[-1];
origin_effect = coefficient[1:180];
destination_effect = coefficient[-c(1:181)]
destination_effect = destination_effect[1:180]
fixed_effects = data.frame(origin_fixed_effects = origin_effect, destination_fixed_effects = destination_effect )
fixed_effects = na.omit(fixed_effects);
fixed_effects = sweep(fixed_effects, 2, apply(fixed_effects,2,mean));
qplot(fixed_effects$origin_effect,fixed_effects$destination_effect) + xlab("Origin effect") + ylab("Destination effect") + ggtitle("Fixed effects") + geom_smooth()
ggsave("Fixed_effects.eps",width = 10, height = 10)
coefficient = coef(result_b);
coefficient = coefficient[-1];
origin_effect = coefficient[1:180];
destination_effect = coefficient[-c(1:181)]
destination_effect = destination_effect[1:180]
fixed_effects = data.frame(origin_fixed_effects = origin_effect, destination_fixed_effects = destination_effect )
fixed_effects = na.omit(fixed_effects);
fixed_effects = sweep(fixed_effects, 2, apply(fixed_effects,2,mean));
qplot(fixed_effects$origin_effect,fixed_effects$destination_effect) + xlab("Origin effect") + ylab("Destination effect") + ggtitle("Fixed effects") + geom_smooth()
qplot(fixed_effects$origin_fixed_effects,fixed_effects$destination_fixed_effects) + xlab("Origin effect") + ylab("Destination effect") + ggtitle("Fixed effects") + geom_smooth()
ggsave("Fixed_effects.eps",width = 10, height = 10)
coefficient = coef(result_b);
coefficient = coefficient[-1];
origin_effect = coefficient[1:180];
destination_effect = coefficient[-c(1:181)]
destination_effect = destination_effect[1:180]
fixed_effects = data.frame(origin_fixed_effects = origin_effect, destination_fixed_effects = destination_effect )
fixed_effects = na.omit(fixed_effects);
fixed_effects
coefficient = coef(result_b);
coefficient = coefficient[-1];
origin_effect = coefficient[1:180];
destination_effect = coefficient[-c(1:181)]
destination_effect = destination_effect[1:180]
origin_effect
result_c = lm(df_c$ratio ~ 0 + . , data = df_c);
summary(result_c)
result_d = lm(df_d$trade ~ 0 +. ,data = df_d);
summary(result_d)
balance = lm(df_import_export$import ~ 0 + df_import_export$export)
summary(balance)
result_2 = lm(df_2$trade ~ 0 + . , data  = df_2)
summary(result_2)
q()
list()
load("~/Dropbox/Matlab/460(Allen)/PS3/data_set_R.RData")
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
df_b = df_b[-c(1,2,4,5,6,7,9,10)]; # 3 = distance , 8 = trade flow
df_c = df_c[-c(1,2,4,5,6,7,8,9)];
df_d = df_d[-c(1,2,4,5,6,7,9,10)];
df_2 = df_2[-c(1,2,4,5,6,7,9,10)];
save.image("trade_data_set_cleaned")
result_a_ii = lm(df$trade~ 0 + df$distance + df$gdp_origin + df$gdp_destination);
summary(result_a_ii)
q()
# this is a code for Treb Allen's trade course.
a = getwd();
setwd(a)
require('foreign')
require('plm')
require('mFilter')
require('ggplot2')
require("vars")
require("stats")
require("xlsx")
require("reshape2")
require("stargazer")
require("grid")
require("gridExtra")
require("R.matlab")
require("car")
require("lmtest")
require("plyr")
rm(list=ls());
gc();
gc();
## load the data ------------------------------------------
df = read.dta("tradedata.dta")
writeMat("test")
writeMat("test",df)
help writeMat
help(writeMat)
a = rnon
a = rnorm(10)
writeMat("test.mat",a)
writeMat("test.mat",x = a)
writeMat("modified_by_R.mat",df = df)
names(df)
## load the data ------------------------------------------
df = read.dta("tradedata.dta")
dff = df;
df = subset(df,trade>0);
dff = subset(dff,trade>0);
# take a log
dff[-c(1,2)] = log(dff[-c(1,2)]);
df = ddply(df, c("origin"), transform, x_jj = gdp_destination - sum(trade))
# drop the observations
df = subset(df,x_jj>0);
# take the log
df[-c(1,2)] = log(df[-c(1,2)]);
# log ratio
df$ratio = df$trade-df$x_jj;
names(df)
df_matlab = df[c(4,5,8,10)];
writeMat('data_made_byR.mat',dataset = df_matlab)
df_matlab = df[c(1,2,4,5,8,10)];
writeMat('data_made_byR.mat',dataset = df_matlab)
# data set for matlab
df_matlab = df[c(4,5,8,10)];
writeMat('data_made_byR.mat',dataset = df_matlab)
ls
df$origin[1:10]
df$destination[1:10]
names(df)
class(names)
class(total_name)
class(total_name)
a = df$origin;
b = df$destination;
c = rbind(a,b);
c = c[1,];
total_name = unique(c);
a = df$origin;
b = df$destination;
c = rbind(a,b);
c = c[1,];
total_name = unique(c);
class(total_name)
dim(total_name)
total_name
inf
dim(total_name)
class(total_name)
as.matrix(total_name)
test = as.matrix(total_name)
dim(test)
matrix(1:181^2,181,181)
181^2
attach(df)
gdp_destination
gdp_destination[1:100]
gdp_origin[1:100]
attach(df)
names(df)
df_matlab = df[c(1,2,6,7,8,10)];
names(df_matlab)
writeMat('data_Q3.mat',dataset = df_matlab)
q()
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
N_country = dim(as.matrix(total_name));
GDP = as.matrix(gdp_destination[1:N_coutry])
N_country = dim(as.matrix(total_name));
GDP = as.matrix(gdp_destination[1:N_country])
df_matlab = df[c(1,2,6,7,8,10)];
writeMat('data_Q3.mat',dataset = df_matlab)
q()
source('~/Dropbox/Matlab/460(Allen)/PS3/Q1_data_setup.R')
rm(list=ls());
gc();
gc();
df = read.dta("tradedata.dta")
writeMat('tradedata_original.mat',dataset = df)
head(df)
head(df)
q()
